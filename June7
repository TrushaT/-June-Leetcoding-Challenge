Solution 1
#algo learned from gfg . Cool DP problem !
class Solution:
    def count(coins,m,n):
        l = [[0 for x in range(m)] for x in range(n+1)]
        for i in range(m):
            l[0][i] = 1
        for i in range(1,n+1):
            for j in  range(m):
                x = l[i - coins[j]][j] if i-coins[j] >= 0 else 0
                y = l[i][j-1] if j >= 1 else 0
                l[i][j] = x+y
                
        return l[n][m-1]
                


                
                
                
                
    def change(self, amount: int, coins: List[int]) -> int:
        m = len(coins)
        n = amount
        if n == 0:
            if m == 0:
                return 1
            
        if n>0 and m ==0:
            return 0
            
        return Solution.count(coins,m,n)
   Solution 2 :
   # code that made me realise how easy the problem was and how stupid I was to not get it ! 
   class Solution:
    def change(self, n: int, coins: List[int]) -> int:
        C =  [0]*(n+1)
        C[0] = 1
        for d in coins:
            for i in range(d,n+1):
                C[i] += C[i-d]
        return C[n]
                
        

   
        
        
        
